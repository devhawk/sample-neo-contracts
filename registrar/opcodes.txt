#682 bytes
55 0: PUSH5  # The number 5 is pushed onto the stack.
c5 1: NEWARRAY  #
6b 2: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6c 3: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 4: DUP  # Duplicates the top stack item.
6b 5: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
00 6: PUSH0  #An empty array of bytes is pushed onto the stack
52 7: PUSH2  # The number 2 is pushed onto the stack.
7a 8: ROLL  # The item n back in the stack is moved to the top.
c4 9: SETITEM  #
6c 10: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 11: DUP  # Duplicates the top stack item.
6b 12: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
51 13: PUSH1  # The number 1 is pushed onto the stack.
52 14: PUSH2  # The number 2 is pushed onto the stack.
7a 15: ROLL  # The item n back in the stack is moved to the top.
c4 16: SETITEM  #
61 17: NOP  # Does nothing.
6a 18: DUPFROMALTSTACK  #
00 19: PUSH0  #An empty array of bytes is pushed onto the stack
c3 20: PICKITEM  #
6a 21: DUPFROMALTSTACK  #
53 22: PUSH3  # The number 3 is pushed onto the stack.
52 23: PUSH2  # The number 2 is pushed onto the stack.
7a 24: ROLL  # The item n back in the stack is moved to the top.
c4 25: SETITEM  #
6a 26: DUPFROMALTSTACK  #
53 27: PUSH3  # The number 3 is pushed onto the stack.
c3 28: PICKITEM  #
6a 29: DUPFROMALTSTACK  #
52 30: PUSH2  # The number 2 is pushed onto the stack.
52 31: PUSH2  # The number 2 is pushed onto the stack.
7a 32: ROLL  # The item n back in the stack is moved to the top.
c4 33: SETITEM  #
6a 34: DUPFROMALTSTACK  #
52 35: PUSH2  # The number 2 is pushed onto the stack.
c3 36: PICKITEM  #
64 37: JMPIFNOT 9900 # 153
6a 40: DUPFROMALTSTACK  #
52 41: PUSH2  # The number 2 is pushed onto the stack.
c3 42: PICKITEM  #
05 43: PUSHBYTES5 7175657279 # query
87 49: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 50: JMPIF 3400 # 52
6a 53: DUPFROMALTSTACK  #
52 54: PUSH2  # The number 2 is pushed onto the stack.
c3 55: PICKITEM  #
08 56: PUSHBYTES8 7265676973746572 # register
87 65: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 66: JMPIF 3700 # 55
6a 69: DUPFROMALTSTACK  #
52 70: PUSH2  # The number 2 is pushed onto the stack.
c3 71: PICKITEM  #
08 72: PUSHBYTES8 7472616e73666572 # transfer
87 81: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 82: JMPIF 4000 # 64
6a 85: DUPFROMALTSTACK  #
52 86: PUSH2  # The number 2 is pushed onto the stack.
c3 87: PICKITEM  #
06 88: PUSHBYTES6 64656c657465 # delete
87 95: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 96: JMPIF 4b00 # 75
62 99: JMP 5b00 # 91
6a 102: DUPFROMALTSTACK  #
51 103: PUSH1  # The number 1 is pushed onto the stack.
c3 104: PICKITEM  #
00 105: PUSH0  #An empty array of bytes is pushed onto the stack
c3 106: PICKITEM  #
61 107: NOP  # Does nothing.
e0 108: CALL_I 6000 # ret 1 param 1 jump_offset 96
6a 113: DUPFROMALTSTACK  #
54 114: PUSH4  # The number 4 is pushed onto the stack.
52 115: PUSH2  # The number 2 is pushed onto the stack.
7a 116: ROLL  # The item n back in the stack is moved to the top.
c4 117: SETITEM  #
62 118: JMP 5100 # 81
6a 121: DUPFROMALTSTACK  #
51 122: PUSH1  # The number 1 is pushed onto the stack.
c3 123: PICKITEM  #
00 124: PUSH0  #An empty array of bytes is pushed onto the stack
c3 125: PICKITEM  #
6a 126: DUPFROMALTSTACK  #
51 127: PUSH1  # The number 1 is pushed onto the stack.
c3 128: PICKITEM  #
51 129: PUSH1  # The number 1 is pushed onto the stack.
c3 130: PICKITEM  #
61 131: NOP  # Does nothing.
7c 132: SWAP  # The top two items on the stack are swapped.
e0 133: CALL_I 7300 # ret 1 param 2 jump_offset 115
6a 138: DUPFROMALTSTACK  #
54 139: PUSH4  # The number 4 is pushed onto the stack.
52 140: PUSH2  # The number 2 is pushed onto the stack.
7a 141: ROLL  # The item n back in the stack is moved to the top.
c4 142: SETITEM  #
62 143: JMP 3800 # 56
6a 146: DUPFROMALTSTACK  #
51 147: PUSH1  # The number 1 is pushed onto the stack.
c3 148: PICKITEM  #
00 149: PUSH0  #An empty array of bytes is pushed onto the stack
c3 150: PICKITEM  #
6a 151: DUPFROMALTSTACK  #
51 152: PUSH1  # The number 1 is pushed onto the stack.
c3 153: PICKITEM  #
51 154: PUSH1  # The number 1 is pushed onto the stack.
c3 155: PICKITEM  #
61 156: NOP  # Does nothing.
7c 157: SWAP  # The top two items on the stack are swapped.
e0 158: CALL_I e300 # ret 1 param 2 jump_offset 227
6a 163: DUPFROMALTSTACK  #
54 164: PUSH4  # The number 4 is pushed onto the stack.
52 165: PUSH2  # The number 2 is pushed onto the stack.
7a 166: ROLL  # The item n back in the stack is moved to the top.
c4 167: SETITEM  #
62 168: JMP 1f00 # 31
6a 171: DUPFROMALTSTACK  #
51 172: PUSH1  # The number 1 is pushed onto the stack.
c3 173: PICKITEM  #
00 174: PUSH0  #An empty array of bytes is pushed onto the stack
c3 175: PICKITEM  #
61 176: NOP  # Does nothing.
e0 177: CALL_I 7901 # ret 1 param 1 jump_offset 377
6a 182: DUPFROMALTSTACK  #
54 183: PUSH4  # The number 4 is pushed onto the stack.
52 184: PUSH2  # The number 2 is pushed onto the stack.
7a 185: ROLL  # The item n back in the stack is moved to the top.
c4 186: SETITEM  #
62 187: JMP 0c00 # 12
00 190: PUSH0  #An empty array of bytes is pushed onto the stack
6a 191: DUPFROMALTSTACK  #
54 192: PUSH4  # The number 4 is pushed onto the stack.
52 193: PUSH2  # The number 2 is pushed onto the stack.
7a 194: ROLL  # The item n back in the stack is moved to the top.
c4 195: SETITEM  #
62 196: JMP 0300 # 3
6a 199: DUPFROMALTSTACK  #
54 200: PUSH4  # The number 4 is pushed onto the stack.
c3 201: PICKITEM  #
61 202: NOP  # Does nothing.
6c 203: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 204: DROP  # Removes the top stack item.
66 205: RET  #
52 206: PUSH2  # The number 2 is pushed onto the stack.
c5 207: NEWARRAY  #
6b 208: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6c 209: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 210: DUP  # Duplicates the top stack item.
6b 211: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
00 212: PUSH0  #An empty array of bytes is pushed onto the stack
52 213: PUSH2  # The number 2 is pushed onto the stack.
7a 214: ROLL  # The item n back in the stack is moved to the top.
c4 215: SETITEM  #
61 216: NOP  # Does nothing.
61 217: NOP  # Does nothing.
68 218: SYSCALL 048418d60d # 
6a 224: DUPFROMALTSTACK  #
00 225: PUSH0  #An empty array of bytes is pushed onto the stack
c3 226: PICKITEM  #
61 227: NOP  # Does nothing.
7c 228: SWAP  # The top two items on the stack are swapped.
68 229: SYSCALL 041f2e7b07 # .{
6a 235: DUPFROMALTSTACK  #
51 236: PUSH1  # The number 1 is pushed onto the stack.
52 237: PUSH2  # The number 2 is pushed onto the stack.
7a 238: ROLL  # The item n back in the stack is moved to the top.
c4 239: SETITEM  #
62 240: JMP 0300 # 3
6a 243: DUPFROMALTSTACK  #
51 244: PUSH1  # The number 1 is pushed onto the stack.
c3 245: PICKITEM  #
61 246: NOP  # Does nothing.
6c 247: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 248: DROP  # Removes the top stack item.
66 249: RET  #
56 250: PUSH6  # The number 6 is pushed onto the stack.
c5 251: NEWARRAY  #
6b 252: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6c 253: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 254: DUP  # Duplicates the top stack item.
6b 255: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
00 256: PUSH0  #An empty array of bytes is pushed onto the stack
52 257: PUSH2  # The number 2 is pushed onto the stack.
7a 258: ROLL  # The item n back in the stack is moved to the top.
c4 259: SETITEM  #
6c 260: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 261: DUP  # Duplicates the top stack item.
6b 262: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
51 263: PUSH1  # The number 1 is pushed onto the stack.
52 264: PUSH2  # The number 2 is pushed onto the stack.
7a 265: ROLL  # The item n back in the stack is moved to the top.
c4 266: SETITEM  #
61 267: NOP  # Does nothing.
6a 268: DUPFROMALTSTACK  #
51 269: PUSH1  # The number 1 is pushed onto the stack.
c3 270: PICKITEM  #
61 271: NOP  # Does nothing.
68 272: SYSCALL 04efdfe694 # 
00 278: PUSH0  #An empty array of bytes is pushed onto the stack
9c 279: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 280: DUPFROMALTSTACK  #
53 281: PUSH3  # The number 3 is pushed onto the stack.
52 282: PUSH2  # The number 2 is pushed onto the stack.
7a 283: ROLL  # The item n back in the stack is moved to the top.
c4 284: SETITEM  #
6a 285: DUPFROMALTSTACK  #
53 286: PUSH3  # The number 3 is pushed onto the stack.
c3 287: PICKITEM  #
64 288: JMPIFNOT 0c00 # 12
00 291: PUSH0  #An empty array of bytes is pushed onto the stack
6a 292: DUPFROMALTSTACK  #
54 293: PUSH4  # The number 4 is pushed onto the stack.
52 294: PUSH2  # The number 2 is pushed onto the stack.
7a 295: ROLL  # The item n back in the stack is moved to the top.
c4 296: SETITEM  #
62 297: JMP 5300 # 83
61 300: NOP  # Does nothing.
68 301: SYSCALL 048418d60d # 
6a 307: DUPFROMALTSTACK  #
00 308: PUSH0  #An empty array of bytes is pushed onto the stack
c3 309: PICKITEM  #
61 310: NOP  # Does nothing.
7c 311: SWAP  # The top two items on the stack are swapped.
68 312: SYSCALL 041f2e7b07 # .{
6a 318: DUPFROMALTSTACK  #
52 319: PUSH2  # The number 2 is pushed onto the stack.
52 320: PUSH2  # The number 2 is pushed onto the stack.
7a 321: ROLL  # The item n back in the stack is moved to the top.
c4 322: SETITEM  #
6a 323: DUPFROMALTSTACK  #
52 324: PUSH2  # The number 2 is pushed onto the stack.
c3 325: PICKITEM  #
00 326: PUSH0  #An empty array of bytes is pushed onto the stack
a0 327: GT  # Returns 1 if a is greater than b, 0 otherwise.
6a 328: DUPFROMALTSTACK  #
55 329: PUSH5  # The number 5 is pushed onto the stack.
52 330: PUSH2  # The number 2 is pushed onto the stack.
7a 331: ROLL  # The item n back in the stack is moved to the top.
c4 332: SETITEM  #
6a 333: DUPFROMALTSTACK  #
55 334: PUSH5  # The number 5 is pushed onto the stack.
c3 335: PICKITEM  #
64 336: JMPIFNOT 0c00 # 12
00 339: PUSH0  #An empty array of bytes is pushed onto the stack
6a 340: DUPFROMALTSTACK  #
54 341: PUSH4  # The number 4 is pushed onto the stack.
52 342: PUSH2  # The number 2 is pushed onto the stack.
7a 343: ROLL  # The item n back in the stack is moved to the top.
c4 344: SETITEM  #
62 345: JMP 2300 # 35
61 348: NOP  # Does nothing.
68 349: SYSCALL 048418d60d # 
6a 355: DUPFROMALTSTACK  #
00 356: PUSH0  #An empty array of bytes is pushed onto the stack
c3 357: PICKITEM  #
6a 358: DUPFROMALTSTACK  #
51 359: PUSH1  # The number 1 is pushed onto the stack.
c3 360: PICKITEM  #
61 361: NOP  # Does nothing.
52 362: PUSH2  # The number 2 is pushed onto the stack.
72 363: XSWAP  #
68 364: SYSCALL 0452a141f5 # RA
61 370: NOP  # Does nothing.
51 371: PUSH1  # The number 1 is pushed onto the stack.
6a 372: DUPFROMALTSTACK  #
54 373: PUSH4  # The number 4 is pushed onto the stack.
52 374: PUSH2  # The number 2 is pushed onto the stack.
7a 375: ROLL  # The item n back in the stack is moved to the top.
c4 376: SETITEM  #
62 377: JMP 0300 # 3
6a 380: DUPFROMALTSTACK  #
54 381: PUSH4  # The number 4 is pushed onto the stack.
c3 382: PICKITEM  #
61 383: NOP  # Does nothing.
6c 384: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 385: DROP  # Removes the top stack item.
66 386: RET  #
57 387: PUSH7  # The number 7 is pushed onto the stack.
c5 388: NEWARRAY  #
6b 389: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6c 390: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 391: DUP  # Duplicates the top stack item.
6b 392: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
00 393: PUSH0  #An empty array of bytes is pushed onto the stack
52 394: PUSH2  # The number 2 is pushed onto the stack.
7a 395: ROLL  # The item n back in the stack is moved to the top.
c4 396: SETITEM  #
6c 397: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 398: DUP  # Duplicates the top stack item.
6b 399: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
51 400: PUSH1  # The number 1 is pushed onto the stack.
52 401: PUSH2  # The number 2 is pushed onto the stack.
7a 402: ROLL  # The item n back in the stack is moved to the top.
c4 403: SETITEM  #
61 404: NOP  # Does nothing.
6a 405: DUPFROMALTSTACK  #
51 406: PUSH1  # The number 1 is pushed onto the stack.
c3 407: PICKITEM  #
61 408: NOP  # Does nothing.
68 409: SYSCALL 04efdfe694 # 
00 415: PUSH0  #An empty array of bytes is pushed onto the stack
9c 416: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 417: DUPFROMALTSTACK  #
53 418: PUSH3  # The number 3 is pushed onto the stack.
52 419: PUSH2  # The number 2 is pushed onto the stack.
7a 420: ROLL  # The item n back in the stack is moved to the top.
c4 421: SETITEM  #
6a 422: DUPFROMALTSTACK  #
53 423: PUSH3  # The number 3 is pushed onto the stack.
c3 424: PICKITEM  #
64 425: JMPIFNOT 0c00 # 12
00 428: PUSH0  #An empty array of bytes is pushed onto the stack
6a 429: DUPFROMALTSTACK  #
54 430: PUSH4  # The number 4 is pushed onto the stack.
52 431: PUSH2  # The number 2 is pushed onto the stack.
7a 432: ROLL  # The item n back in the stack is moved to the top.
c4 433: SETITEM  #
62 434: JMP 7300 # 115
61 437: NOP  # Does nothing.
68 438: SYSCALL 048418d60d # 
6a 444: DUPFROMALTSTACK  #
00 445: PUSH0  #An empty array of bytes is pushed onto the stack
c3 446: PICKITEM  #
61 447: NOP  # Does nothing.
7c 448: SWAP  # The top two items on the stack are swapped.
68 449: SYSCALL 041f2e7b07 # .{
6a 455: DUPFROMALTSTACK  #
52 456: PUSH2  # The number 2 is pushed onto the stack.
52 457: PUSH2  # The number 2 is pushed onto the stack.
7a 458: ROLL  # The item n back in the stack is moved to the top.
c4 459: SETITEM  #
6a 460: DUPFROMALTSTACK  #
52 461: PUSH2  # The number 2 is pushed onto the stack.
c3 462: PICKITEM  #
00 463: PUSH0  #An empty array of bytes is pushed onto the stack
9c 464: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 465: DUPFROMALTSTACK  #
55 466: PUSH5  # The number 5 is pushed onto the stack.
52 467: PUSH2  # The number 2 is pushed onto the stack.
7a 468: ROLL  # The item n back in the stack is moved to the top.
c4 469: SETITEM  #
6a 470: DUPFROMALTSTACK  #
55 471: PUSH5  # The number 5 is pushed onto the stack.
c3 472: PICKITEM  #
64 473: JMPIFNOT 0c00 # 12
00 476: PUSH0  #An empty array of bytes is pushed onto the stack
6a 477: DUPFROMALTSTACK  #
54 478: PUSH4  # The number 4 is pushed onto the stack.
52 479: PUSH2  # The number 2 is pushed onto the stack.
7a 480: ROLL  # The item n back in the stack is moved to the top.
c4 481: SETITEM  #
62 482: JMP 4300 # 67
6a 485: DUPFROMALTSTACK  #
52 486: PUSH2  # The number 2 is pushed onto the stack.
c3 487: PICKITEM  #
61 488: NOP  # Does nothing.
68 489: SYSCALL 04efdfe694 # 
00 495: PUSH0  #An empty array of bytes is pushed onto the stack
9c 496: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 497: DUPFROMALTSTACK  #
56 498: PUSH6  # The number 6 is pushed onto the stack.
52 499: PUSH2  # The number 2 is pushed onto the stack.
7a 500: ROLL  # The item n back in the stack is moved to the top.
c4 501: SETITEM  #
6a 502: DUPFROMALTSTACK  #
56 503: PUSH6  # The number 6 is pushed onto the stack.
c3 504: PICKITEM  #
64 505: JMPIFNOT 0c00 # 12
00 508: PUSH0  #An empty array of bytes is pushed onto the stack
6a 509: DUPFROMALTSTACK  #
54 510: PUSH4  # The number 4 is pushed onto the stack.
52 511: PUSH2  # The number 2 is pushed onto the stack.
7a 512: ROLL  # The item n back in the stack is moved to the top.
c4 513: SETITEM  #
62 514: JMP 2300 # 35
61 517: NOP  # Does nothing.
68 518: SYSCALL 048418d60d # 
6a 524: DUPFROMALTSTACK  #
00 525: PUSH0  #An empty array of bytes is pushed onto the stack
c3 526: PICKITEM  #
6a 527: DUPFROMALTSTACK  #
51 528: PUSH1  # The number 1 is pushed onto the stack.
c3 529: PICKITEM  #
61 530: NOP  # Does nothing.
52 531: PUSH2  # The number 2 is pushed onto the stack.
72 532: XSWAP  #
68 533: SYSCALL 0452a141f5 # RA
61 539: NOP  # Does nothing.
51 540: PUSH1  # The number 1 is pushed onto the stack.
6a 541: DUPFROMALTSTACK  #
54 542: PUSH4  # The number 4 is pushed onto the stack.
52 543: PUSH2  # The number 2 is pushed onto the stack.
7a 544: ROLL  # The item n back in the stack is moved to the top.
c4 545: SETITEM  #
62 546: JMP 0300 # 3
6a 549: DUPFROMALTSTACK  #
54 550: PUSH4  # The number 4 is pushed onto the stack.
c3 551: PICKITEM  #
61 552: NOP  # Does nothing.
6c 553: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 554: DROP  # Removes the top stack item.
66 555: RET  #
55 556: PUSH5  # The number 5 is pushed onto the stack.
c5 557: NEWARRAY  #
6b 558: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6c 559: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
76 560: DUP  # Duplicates the top stack item.
6b 561: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
00 562: PUSH0  #An empty array of bytes is pushed onto the stack
52 563: PUSH2  # The number 2 is pushed onto the stack.
7a 564: ROLL  # The item n back in the stack is moved to the top.
c4 565: SETITEM  #
61 566: NOP  # Does nothing.
61 567: NOP  # Does nothing.
68 568: SYSCALL 048418d60d # 
6a 574: DUPFROMALTSTACK  #
00 575: PUSH0  #An empty array of bytes is pushed onto the stack
c3 576: PICKITEM  #
61 577: NOP  # Does nothing.
7c 578: SWAP  # The top two items on the stack are swapped.
68 579: SYSCALL 041f2e7b07 # .{
6a 585: DUPFROMALTSTACK  #
51 586: PUSH1  # The number 1 is pushed onto the stack.
52 587: PUSH2  # The number 2 is pushed onto the stack.
7a 588: ROLL  # The item n back in the stack is moved to the top.
c4 589: SETITEM  #
6a 590: DUPFROMALTSTACK  #
51 591: PUSH1  # The number 1 is pushed onto the stack.
c3 592: PICKITEM  #
00 593: PUSH0  #An empty array of bytes is pushed onto the stack
9c 594: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 595: DUPFROMALTSTACK  #
52 596: PUSH2  # The number 2 is pushed onto the stack.
52 597: PUSH2  # The number 2 is pushed onto the stack.
7a 598: ROLL  # The item n back in the stack is moved to the top.
c4 599: SETITEM  #
6a 600: DUPFROMALTSTACK  #
52 601: PUSH2  # The number 2 is pushed onto the stack.
c3 602: PICKITEM  #
64 603: JMPIFNOT 0c00 # 12
00 606: PUSH0  #An empty array of bytes is pushed onto the stack
6a 607: DUPFROMALTSTACK  #
53 608: PUSH3  # The number 3 is pushed onto the stack.
52 609: PUSH2  # The number 2 is pushed onto the stack.
7a 610: ROLL  # The item n back in the stack is moved to the top.
c4 611: SETITEM  #
62 612: JMP 3f00 # 63
6a 615: DUPFROMALTSTACK  #
51 616: PUSH1  # The number 1 is pushed onto the stack.
c3 617: PICKITEM  #
61 618: NOP  # Does nothing.
68 619: SYSCALL 04efdfe694 # 
00 625: PUSH0  #An empty array of bytes is pushed onto the stack
9c 626: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 627: DUPFROMALTSTACK  #
54 628: PUSH4  # The number 4 is pushed onto the stack.
52 629: PUSH2  # The number 2 is pushed onto the stack.
7a 630: ROLL  # The item n back in the stack is moved to the top.
c4 631: SETITEM  #
6a 632: DUPFROMALTSTACK  #
54 633: PUSH4  # The number 4 is pushed onto the stack.
c3 634: PICKITEM  #
64 635: JMPIFNOT 0c00 # 12
00 638: PUSH0  #An empty array of bytes is pushed onto the stack
6a 639: DUPFROMALTSTACK  #
53 640: PUSH3  # The number 3 is pushed onto the stack.
52 641: PUSH2  # The number 2 is pushed onto the stack.
7a 642: ROLL  # The item n back in the stack is moved to the top.
c4 643: SETITEM  #
62 644: JMP 1f00 # 31
61 647: NOP  # Does nothing.
68 648: SYSCALL 048418d60d # 
6a 654: DUPFROMALTSTACK  #
00 655: PUSH0  #An empty array of bytes is pushed onto the stack
c3 656: PICKITEM  #
61 657: NOP  # Does nothing.
7c 658: SWAP  # The top two items on the stack are swapped.
68 659: SYSCALL 04ef7cef5d # |]
61 665: NOP  # Does nothing.
51 666: PUSH1  # The number 1 is pushed onto the stack.
6a 667: DUPFROMALTSTACK  #
53 668: PUSH3  # The number 3 is pushed onto the stack.
52 669: PUSH2  # The number 2 is pushed onto the stack.
7a 670: ROLL  # The item n back in the stack is moved to the top.
c4 671: SETITEM  #
62 672: JMP 0300 # 3
6a 675: DUPFROMALTSTACK  #
53 676: PUSH3  # The number 3 is pushed onto the stack.
c3 677: PICKITEM  #
61 678: NOP  # Does nothing.
6c 679: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 680: DROP  # Removes the top stack item.
66 681: RET  #

#AFTER OPTIMIZATIONS: ops 491=>440 op_reduction:10.39%
55 0: PUSH5  # The number 5 is pushed onto the stack.
c5 1: NEWARRAY  #
6b 2: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6a DUPFROMALTSTACK  #
00 6: PUSH0  #An empty array of bytes is pushed onto the stack
52 7: PUSH2  # The number 2 is pushed onto the stack.
7a 8: ROLL  # The item n back in the stack is moved to the top.
c4 9: SETITEM  #
6a DUPFROMALTSTACK  #
51 13: PUSH1  # The number 1 is pushed onto the stack.
52 14: PUSH2  # The number 2 is pushed onto the stack.
7a 15: ROLL  # The item n back in the stack is moved to the top.
c4 16: SETITEM  #
6a 18: DUPFROMALTSTACK  #
00 19: PUSH0  #An empty array of bytes is pushed onto the stack
c3 20: PICKITEM  #
6a 21: DUPFROMALTSTACK  #
53 22: PUSH3  # The number 3 is pushed onto the stack.
52 23: PUSH2  # The number 2 is pushed onto the stack.
7a 24: ROLL  # The item n back in the stack is moved to the top.
c4 25: SETITEM  #
6a 26: DUPFROMALTSTACK  #
53 27: PUSH3  # The number 3 is pushed onto the stack.
c3 28: PICKITEM  #
6a 29: DUPFROMALTSTACK  #
52 30: PUSH2  # The number 2 is pushed onto the stack.
52 31: PUSH2  # The number 2 is pushed onto the stack.
7a 32: ROLL  # The item n back in the stack is moved to the top.
c4 33: SETITEM  #
6a 34: DUPFROMALTSTACK  #
52 35: PUSH2  # The number 2 is pushed onto the stack.
c3 36: PICKITEM  #
64 37: JMPIFNOT 9900 # 153
6a 40: DUPFROMALTSTACK  #
52 41: PUSH2  # The number 2 is pushed onto the stack.
c3 42: PICKITEM  #
05 43: PUSHBYTES5 7175657279 # query
87 49: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 50: JMPIF 3400 # 52
6a 53: DUPFROMALTSTACK  #
52 54: PUSH2  # The number 2 is pushed onto the stack.
c3 55: PICKITEM  #
08 56: PUSHBYTES8 7265676973746572 # register
87 65: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 66: JMPIF 3700 # 55
6a 69: DUPFROMALTSTACK  #
52 70: PUSH2  # The number 2 is pushed onto the stack.
c3 71: PICKITEM  #
08 72: PUSHBYTES8 7472616e73666572 # transfer
87 81: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 82: JMPIF 4000 # 64
6a 85: DUPFROMALTSTACK  #
52 86: PUSH2  # The number 2 is pushed onto the stack.
c3 87: PICKITEM  #
06 88: PUSHBYTES6 64656c657465 # delete
87 95: EQUAL  # Returns 1 if the inputs are exactly equal, 0 otherwise.
63 96: JMPIF 4b00 # 75
62 99: JMP 5b00 # 91
6a 102: DUPFROMALTSTACK  #
51 103: PUSH1  # The number 1 is pushed onto the stack.
c3 104: PICKITEM  #
00 105: PUSH0  #An empty array of bytes is pushed onto the stack
c3 106: PICKITEM  #
e0 108: CALL_I 6000 # ret 1 param 1 jump_offset 96
6a 113: DUPFROMALTSTACK  #
54 114: PUSH4  # The number 4 is pushed onto the stack.
52 115: PUSH2  # The number 2 is pushed onto the stack.
7a 116: ROLL  # The item n back in the stack is moved to the top.
c4 117: SETITEM  #
62 118: JMP 5100 # 81
6a 121: DUPFROMALTSTACK  #
51 122: PUSH1  # The number 1 is pushed onto the stack.
c3 123: PICKITEM  #
00 124: PUSH0  #An empty array of bytes is pushed onto the stack
c3 125: PICKITEM  #
6a 126: DUPFROMALTSTACK  #
51 127: PUSH1  # The number 1 is pushed onto the stack.
c3 128: PICKITEM  #
51 129: PUSH1  # The number 1 is pushed onto the stack.
c3 130: PICKITEM  #
7c 132: SWAP  # The top two items on the stack are swapped.
e0 133: CALL_I 7300 # ret 1 param 2 jump_offset 115
6a 138: DUPFROMALTSTACK  #
54 139: PUSH4  # The number 4 is pushed onto the stack.
52 140: PUSH2  # The number 2 is pushed onto the stack.
7a 141: ROLL  # The item n back in the stack is moved to the top.
c4 142: SETITEM  #
62 143: JMP 3800 # 56
6a 146: DUPFROMALTSTACK  #
51 147: PUSH1  # The number 1 is pushed onto the stack.
c3 148: PICKITEM  #
00 149: PUSH0  #An empty array of bytes is pushed onto the stack
c3 150: PICKITEM  #
6a 151: DUPFROMALTSTACK  #
51 152: PUSH1  # The number 1 is pushed onto the stack.
c3 153: PICKITEM  #
51 154: PUSH1  # The number 1 is pushed onto the stack.
c3 155: PICKITEM  #
7c 157: SWAP  # The top two items on the stack are swapped.
e0 158: CALL_I e300 # ret 1 param 2 jump_offset 227
6a 163: DUPFROMALTSTACK  #
54 164: PUSH4  # The number 4 is pushed onto the stack.
52 165: PUSH2  # The number 2 is pushed onto the stack.
7a 166: ROLL  # The item n back in the stack is moved to the top.
c4 167: SETITEM  #
62 168: JMP 1f00 # 31
6a 171: DUPFROMALTSTACK  #
51 172: PUSH1  # The number 1 is pushed onto the stack.
c3 173: PICKITEM  #
00 174: PUSH0  #An empty array of bytes is pushed onto the stack
c3 175: PICKITEM  #
e0 177: CALL_I 7901 # ret 1 param 1 jump_offset 377
6a 182: DUPFROMALTSTACK  #
54 183: PUSH4  # The number 4 is pushed onto the stack.
52 184: PUSH2  # The number 2 is pushed onto the stack.
7a 185: ROLL  # The item n back in the stack is moved to the top.
c4 186: SETITEM  #
62 187: JMP 0c00 # 12
00 190: PUSH0  #An empty array of bytes is pushed onto the stack
6a 191: DUPFROMALTSTACK  #
54 192: PUSH4  # The number 4 is pushed onto the stack.
52 193: PUSH2  # The number 2 is pushed onto the stack.
7a 194: ROLL  # The item n back in the stack is moved to the top.
c4 195: SETITEM  #
62 196: JMP 0300 # 3
6a 199: DUPFROMALTSTACK  #
54 200: PUSH4  # The number 4 is pushed onto the stack.
c3 201: PICKITEM  #
6c 203: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 204: DROP  # Removes the top stack item.
66 205: RET  #
52 206: PUSH2  # The number 2 is pushed onto the stack.
c5 207: NEWARRAY  #
6b 208: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6a DUPFROMALTSTACK  #
00 212: PUSH0  #An empty array of bytes is pushed onto the stack
52 213: PUSH2  # The number 2 is pushed onto the stack.
7a 214: ROLL  # The item n back in the stack is moved to the top.
c4 215: SETITEM  #
68 218: SYSCALL 048418d60d # 
6a 224: DUPFROMALTSTACK  #
00 225: PUSH0  #An empty array of bytes is pushed onto the stack
c3 226: PICKITEM  #
7c 228: SWAP  # The top two items on the stack are swapped.
68 229: SYSCALL 041f2e7b07 # .{
6a 235: DUPFROMALTSTACK  #
51 236: PUSH1  # The number 1 is pushed onto the stack.
52 237: PUSH2  # The number 2 is pushed onto the stack.
7a 238: ROLL  # The item n back in the stack is moved to the top.
c4 239: SETITEM  #
62 240: JMP 0300 # 3
6a 243: DUPFROMALTSTACK  #
51 244: PUSH1  # The number 1 is pushed onto the stack.
c3 245: PICKITEM  #
6c 247: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 248: DROP  # Removes the top stack item.
66 249: RET  #
56 250: PUSH6  # The number 6 is pushed onto the stack.
c5 251: NEWARRAY  #
6b 252: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6a DUPFROMALTSTACK  #
00 256: PUSH0  #An empty array of bytes is pushed onto the stack
52 257: PUSH2  # The number 2 is pushed onto the stack.
7a 258: ROLL  # The item n back in the stack is moved to the top.
c4 259: SETITEM  #
6a DUPFROMALTSTACK  #
51 263: PUSH1  # The number 1 is pushed onto the stack.
52 264: PUSH2  # The number 2 is pushed onto the stack.
7a 265: ROLL  # The item n back in the stack is moved to the top.
c4 266: SETITEM  #
6a 268: DUPFROMALTSTACK  #
51 269: PUSH1  # The number 1 is pushed onto the stack.
c3 270: PICKITEM  #
68 272: SYSCALL 04efdfe694 # 
00 278: PUSH0  #An empty array of bytes is pushed onto the stack
9c 279: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 280: DUPFROMALTSTACK  #
53 281: PUSH3  # The number 3 is pushed onto the stack.
52 282: PUSH2  # The number 2 is pushed onto the stack.
7a 283: ROLL  # The item n back in the stack is moved to the top.
c4 284: SETITEM  #
6a 285: DUPFROMALTSTACK  #
53 286: PUSH3  # The number 3 is pushed onto the stack.
c3 287: PICKITEM  #
64 288: JMPIFNOT 0c00 # 12
00 291: PUSH0  #An empty array of bytes is pushed onto the stack
6a 292: DUPFROMALTSTACK  #
54 293: PUSH4  # The number 4 is pushed onto the stack.
52 294: PUSH2  # The number 2 is pushed onto the stack.
7a 295: ROLL  # The item n back in the stack is moved to the top.
c4 296: SETITEM  #
62 297: JMP 5300 # 83
68 301: SYSCALL 048418d60d # 
6a 307: DUPFROMALTSTACK  #
00 308: PUSH0  #An empty array of bytes is pushed onto the stack
c3 309: PICKITEM  #
7c 311: SWAP  # The top two items on the stack are swapped.
68 312: SYSCALL 041f2e7b07 # .{
6a 318: DUPFROMALTSTACK  #
52 319: PUSH2  # The number 2 is pushed onto the stack.
52 320: PUSH2  # The number 2 is pushed onto the stack.
7a 321: ROLL  # The item n back in the stack is moved to the top.
c4 322: SETITEM  #
6a 323: DUPFROMALTSTACK  #
52 324: PUSH2  # The number 2 is pushed onto the stack.
c3 325: PICKITEM  #
00 326: PUSH0  #An empty array of bytes is pushed onto the stack
a0 327: GT  # Returns 1 if a is greater than b, 0 otherwise.
6a 328: DUPFROMALTSTACK  #
55 329: PUSH5  # The number 5 is pushed onto the stack.
52 330: PUSH2  # The number 2 is pushed onto the stack.
7a 331: ROLL  # The item n back in the stack is moved to the top.
c4 332: SETITEM  #
6a 333: DUPFROMALTSTACK  #
55 334: PUSH5  # The number 5 is pushed onto the stack.
c3 335: PICKITEM  #
64 336: JMPIFNOT 0c00 # 12
00 339: PUSH0  #An empty array of bytes is pushed onto the stack
6a 340: DUPFROMALTSTACK  #
54 341: PUSH4  # The number 4 is pushed onto the stack.
52 342: PUSH2  # The number 2 is pushed onto the stack.
7a 343: ROLL  # The item n back in the stack is moved to the top.
c4 344: SETITEM  #
62 345: JMP 2300 # 35
68 349: SYSCALL 048418d60d # 
6a 355: DUPFROMALTSTACK  #
00 356: PUSH0  #An empty array of bytes is pushed onto the stack
c3 357: PICKITEM  #
6a 358: DUPFROMALTSTACK  #
51 359: PUSH1  # The number 1 is pushed onto the stack.
c3 360: PICKITEM  #
52 362: PUSH2  # The number 2 is pushed onto the stack.
72 363: XSWAP  #
68 364: SYSCALL 0452a141f5 # RA
51 371: PUSH1  # The number 1 is pushed onto the stack.
6a 372: DUPFROMALTSTACK  #
54 373: PUSH4  # The number 4 is pushed onto the stack.
52 374: PUSH2  # The number 2 is pushed onto the stack.
7a 375: ROLL  # The item n back in the stack is moved to the top.
c4 376: SETITEM  #
62 377: JMP 0300 # 3
6a 380: DUPFROMALTSTACK  #
54 381: PUSH4  # The number 4 is pushed onto the stack.
c3 382: PICKITEM  #
6c 384: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 385: DROP  # Removes the top stack item.
66 386: RET  #
57 387: PUSH7  # The number 7 is pushed onto the stack.
c5 388: NEWARRAY  #
6b 389: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6a DUPFROMALTSTACK  #
00 393: PUSH0  #An empty array of bytes is pushed onto the stack
52 394: PUSH2  # The number 2 is pushed onto the stack.
7a 395: ROLL  # The item n back in the stack is moved to the top.
c4 396: SETITEM  #
6a DUPFROMALTSTACK  #
51 400: PUSH1  # The number 1 is pushed onto the stack.
52 401: PUSH2  # The number 2 is pushed onto the stack.
7a 402: ROLL  # The item n back in the stack is moved to the top.
c4 403: SETITEM  #
6a 405: DUPFROMALTSTACK  #
51 406: PUSH1  # The number 1 is pushed onto the stack.
c3 407: PICKITEM  #
68 409: SYSCALL 04efdfe694 # 
00 415: PUSH0  #An empty array of bytes is pushed onto the stack
9c 416: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 417: DUPFROMALTSTACK  #
53 418: PUSH3  # The number 3 is pushed onto the stack.
52 419: PUSH2  # The number 2 is pushed onto the stack.
7a 420: ROLL  # The item n back in the stack is moved to the top.
c4 421: SETITEM  #
6a 422: DUPFROMALTSTACK  #
53 423: PUSH3  # The number 3 is pushed onto the stack.
c3 424: PICKITEM  #
64 425: JMPIFNOT 0c00 # 12
00 428: PUSH0  #An empty array of bytes is pushed onto the stack
6a 429: DUPFROMALTSTACK  #
54 430: PUSH4  # The number 4 is pushed onto the stack.
52 431: PUSH2  # The number 2 is pushed onto the stack.
7a 432: ROLL  # The item n back in the stack is moved to the top.
c4 433: SETITEM  #
62 434: JMP 7300 # 115
68 438: SYSCALL 048418d60d # 
6a 444: DUPFROMALTSTACK  #
00 445: PUSH0  #An empty array of bytes is pushed onto the stack
c3 446: PICKITEM  #
7c 448: SWAP  # The top two items on the stack are swapped.
68 449: SYSCALL 041f2e7b07 # .{
6a 455: DUPFROMALTSTACK  #
52 456: PUSH2  # The number 2 is pushed onto the stack.
52 457: PUSH2  # The number 2 is pushed onto the stack.
7a 458: ROLL  # The item n back in the stack is moved to the top.
c4 459: SETITEM  #
6a 460: DUPFROMALTSTACK  #
52 461: PUSH2  # The number 2 is pushed onto the stack.
c3 462: PICKITEM  #
00 463: PUSH0  #An empty array of bytes is pushed onto the stack
9c 464: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 465: DUPFROMALTSTACK  #
55 466: PUSH5  # The number 5 is pushed onto the stack.
52 467: PUSH2  # The number 2 is pushed onto the stack.
7a 468: ROLL  # The item n back in the stack is moved to the top.
c4 469: SETITEM  #
6a 470: DUPFROMALTSTACK  #
55 471: PUSH5  # The number 5 is pushed onto the stack.
c3 472: PICKITEM  #
64 473: JMPIFNOT 0c00 # 12
00 476: PUSH0  #An empty array of bytes is pushed onto the stack
6a 477: DUPFROMALTSTACK  #
54 478: PUSH4  # The number 4 is pushed onto the stack.
52 479: PUSH2  # The number 2 is pushed onto the stack.
7a 480: ROLL  # The item n back in the stack is moved to the top.
c4 481: SETITEM  #
62 482: JMP 4300 # 67
6a 485: DUPFROMALTSTACK  #
52 486: PUSH2  # The number 2 is pushed onto the stack.
c3 487: PICKITEM  #
68 489: SYSCALL 04efdfe694 # 
00 495: PUSH0  #An empty array of bytes is pushed onto the stack
9c 496: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 497: DUPFROMALTSTACK  #
56 498: PUSH6  # The number 6 is pushed onto the stack.
52 499: PUSH2  # The number 2 is pushed onto the stack.
7a 500: ROLL  # The item n back in the stack is moved to the top.
c4 501: SETITEM  #
6a 502: DUPFROMALTSTACK  #
56 503: PUSH6  # The number 6 is pushed onto the stack.
c3 504: PICKITEM  #
64 505: JMPIFNOT 0c00 # 12
00 508: PUSH0  #An empty array of bytes is pushed onto the stack
6a 509: DUPFROMALTSTACK  #
54 510: PUSH4  # The number 4 is pushed onto the stack.
52 511: PUSH2  # The number 2 is pushed onto the stack.
7a 512: ROLL  # The item n back in the stack is moved to the top.
c4 513: SETITEM  #
62 514: JMP 2300 # 35
68 518: SYSCALL 048418d60d # 
6a 524: DUPFROMALTSTACK  #
00 525: PUSH0  #An empty array of bytes is pushed onto the stack
c3 526: PICKITEM  #
6a 527: DUPFROMALTSTACK  #
51 528: PUSH1  # The number 1 is pushed onto the stack.
c3 529: PICKITEM  #
52 531: PUSH2  # The number 2 is pushed onto the stack.
72 532: XSWAP  #
68 533: SYSCALL 0452a141f5 # RA
51 540: PUSH1  # The number 1 is pushed onto the stack.
6a 541: DUPFROMALTSTACK  #
54 542: PUSH4  # The number 4 is pushed onto the stack.
52 543: PUSH2  # The number 2 is pushed onto the stack.
7a 544: ROLL  # The item n back in the stack is moved to the top.
c4 545: SETITEM  #
62 546: JMP 0300 # 3
6a 549: DUPFROMALTSTACK  #
54 550: PUSH4  # The number 4 is pushed onto the stack.
c3 551: PICKITEM  #
6c 553: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 554: DROP  # Removes the top stack item.
66 555: RET  #
55 556: PUSH5  # The number 5 is pushed onto the stack.
c5 557: NEWARRAY  #
6b 558: TOALTSTACK  # Puts the input onto the top of the alt stack. Removes it from the main stack.
6a DUPFROMALTSTACK  #
00 562: PUSH0  #An empty array of bytes is pushed onto the stack
52 563: PUSH2  # The number 2 is pushed onto the stack.
7a 564: ROLL  # The item n back in the stack is moved to the top.
c4 565: SETITEM  #
68 568: SYSCALL 048418d60d # 
6a 574: DUPFROMALTSTACK  #
00 575: PUSH0  #An empty array of bytes is pushed onto the stack
c3 576: PICKITEM  #
7c 578: SWAP  # The top two items on the stack are swapped.
68 579: SYSCALL 041f2e7b07 # .{
6a 585: DUPFROMALTSTACK  #
51 586: PUSH1  # The number 1 is pushed onto the stack.
52 587: PUSH2  # The number 2 is pushed onto the stack.
7a 588: ROLL  # The item n back in the stack is moved to the top.
c4 589: SETITEM  #
6a 590: DUPFROMALTSTACK  #
51 591: PUSH1  # The number 1 is pushed onto the stack.
c3 592: PICKITEM  #
00 593: PUSH0  #An empty array of bytes is pushed onto the stack
9c 594: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 595: DUPFROMALTSTACK  #
52 596: PUSH2  # The number 2 is pushed onto the stack.
52 597: PUSH2  # The number 2 is pushed onto the stack.
7a 598: ROLL  # The item n back in the stack is moved to the top.
c4 599: SETITEM  #
6a 600: DUPFROMALTSTACK  #
52 601: PUSH2  # The number 2 is pushed onto the stack.
c3 602: PICKITEM  #
64 603: JMPIFNOT 0c00 # 12
00 606: PUSH0  #An empty array of bytes is pushed onto the stack
6a 607: DUPFROMALTSTACK  #
53 608: PUSH3  # The number 3 is pushed onto the stack.
52 609: PUSH2  # The number 2 is pushed onto the stack.
7a 610: ROLL  # The item n back in the stack is moved to the top.
c4 611: SETITEM  #
62 612: JMP 3f00 # 63
6a 615: DUPFROMALTSTACK  #
51 616: PUSH1  # The number 1 is pushed onto the stack.
c3 617: PICKITEM  #
68 619: SYSCALL 04efdfe694 # 
00 625: PUSH0  #An empty array of bytes is pushed onto the stack
9c 626: NUMEQUAL  # Returns 1 if the numbers are equal, 0 otherwise.
6a 627: DUPFROMALTSTACK  #
54 628: PUSH4  # The number 4 is pushed onto the stack.
52 629: PUSH2  # The number 2 is pushed onto the stack.
7a 630: ROLL  # The item n back in the stack is moved to the top.
c4 631: SETITEM  #
6a 632: DUPFROMALTSTACK  #
54 633: PUSH4  # The number 4 is pushed onto the stack.
c3 634: PICKITEM  #
64 635: JMPIFNOT 0c00 # 12
00 638: PUSH0  #An empty array of bytes is pushed onto the stack
6a 639: DUPFROMALTSTACK  #
53 640: PUSH3  # The number 3 is pushed onto the stack.
52 641: PUSH2  # The number 2 is pushed onto the stack.
7a 642: ROLL  # The item n back in the stack is moved to the top.
c4 643: SETITEM  #
62 644: JMP 1f00 # 31
68 648: SYSCALL 048418d60d # 
6a 654: DUPFROMALTSTACK  #
00 655: PUSH0  #An empty array of bytes is pushed onto the stack
c3 656: PICKITEM  #
7c 658: SWAP  # The top two items on the stack are swapped.
68 659: SYSCALL 04ef7cef5d # |]
51 666: PUSH1  # The number 1 is pushed onto the stack.
6a 667: DUPFROMALTSTACK  #
53 668: PUSH3  # The number 3 is pushed onto the stack.
52 669: PUSH2  # The number 2 is pushed onto the stack.
7a 670: ROLL  # The item n back in the stack is moved to the top.
c4 671: SETITEM  #
62 672: JMP 0300 # 3
6a 675: DUPFROMALTSTACK  #
53 676: PUSH3  # The number 3 is pushed onto the stack.
c3 677: PICKITEM  #
6c 679: FROMALTSTACK  # Puts the input onto the top of the main stack. Removes it from the alt stack.
75 680: DROP  # Removes the top stack item.
66 681: RET  #

#FINAL AVM: 623 bytes (440 ops) byte compression 8.65%
55c56b6a00527ac46a51527ac46a00c36a53527ac46a53c36a52527ac46a52c36499006a52c3057175657279876334006a52c3087265676973746572876337006a52c3087472616e73666572876340006a52c30664656c65746587634b00625b006a51c300c3e060006a54527ac46251006a51c300c36a51c351c37ce073006a54527ac46238006a51c300c36a51c351c37ce0e3006a54527ac4621f006a51c300c3e079016a54527ac4620c00006a54527ac46203006a54c36c756652c56b6a00527ac468048418d60d6a00c37c68041f2e7b076a51527ac46203006a51c36c756656c56b6a00527ac46a51527ac46a51c36804efdfe694009c6a53527ac46a53c3640c00006a54527ac462530068048418d60d6a00c37c68041f2e7b076a52527ac46a52c300a06a55527ac46a55c3640c00006a54527ac462230068048418d60d6a00c36a51c35272680452a141f5516a54527ac46203006a54c36c756657c56b6a00527ac46a51527ac46a51c36804efdfe694009c6a53527ac46a53c3640c00006a54527ac462730068048418d60d6a00c37c68041f2e7b076a52527ac46a52c3009c6a55527ac46a55c3640c00006a54527ac46243006a52c36804efdfe694009c6a56527ac46a56c3640c00006a54527ac462230068048418d60d6a00c36a51c35272680452a141f5516a54527ac46203006a54c36c756655c56b6a00527ac468048418d60d6a00c37c68041f2e7b076a51527ac46a51c3009c6a52527ac46a52c3640c00006a53527ac4623f006a51c36804efdfe694009c6a54527ac46a54c3640c00006a53527ac4621f0068048418d60d6a00c37c6804ef7cef5d516a53527ac46203006a53c36c7566
#OPTIMIZED AVM USING neon-opt: bytes 8.65% | ops 10.39%
